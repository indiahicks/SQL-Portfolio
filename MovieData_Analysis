--AGG FUNCTION 
SELECT release_year, AVG(budget) AS avg_budget, AVG(gross) AS avg_gross
FROM film
WHERE release_year > 1990
GROUP BY release_year
HAVING AVG(budget) > 60000000
LIMIT 5 


-- SUM(CASE..WHEN..) to count the number of titles in each rating category 

SELECT
SUM(CASE WHEN rating = 'G'THEN 1 ELSE 0 END) AS "G",
SUM(CASE WHEN rating = 'PG'THEN 1 ELSE 0 END) AS "PG",
SUM(CASE WHEN rating = 'NC-17' THEN 1 ELSE END) AS "NC-17",
SUM(CASE WHEN rating = 'PG-13'THEN 1 ELSE 0 END) AS "PG-13",
FROM film



--WINDOW FUNCTION to rank values by film title, grouped theater city
SELECT * FROM 
(SELECT 
title,
city,
COUNT(*),
DENSE_RANK() OVER(PARTITION BY city ORDER BY title) as rank
FROM theater_list tl 
LEFT JOIN films p 
ON tl.movie_id = p.film_id 
GROUP BY title,city) as subquery 
WHERE rank IN (1,2,3) 

-- CASE WHEN 
SELECT count(*),
CASE
	WHEN replacement_cost < 20 THEN 'LOW'
	WHEN replacement_cost < 25 THEN 'MEDIUM'
	ELSE 'HIGH'
END as replacement_price
FROM film 
GROUP BY replacement_price




--CREATED VIEW to a list of movies with their length, title, and category - filtered to only show movies in 'Action' and 'Comedy'
CREATE VIEW films_category
AS
SELECT title, length, name 
FROM film f
LEFT JOIN film_category fc
ON f.film_id = fc.film_id 
INNER JOIN category c 
ON fc.category_id = c.category_id
WHERE name IN ('Action', 'Comedy')
ORDER BY LENGTH DESC

--Show only movie titles, their associated film_id + lengths that have the highest length in each rating category â€“ Also show the rating 
SELECT title, film_id, length 
FROM film f1
WHERE length = (SELECT MAX(length) FROM film 2
				WHERE f1.rating = f2.replacement) -- CORRELATED SUBQUERY (WHERE)

-- SHOW PAIRS OF MOVIES THAT HAVE THE SAME LENGTH USING SELF JOIN
SELECT 
title1.title,
title2.title,
title1.length as length 
FROM film title1
LEFT JOIN film title2 
ON title1.length = title2.length 
WHERE title1.title != title2.title 
ORDER BY length DESC





